<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>New Team</title>
    <link href="/styles.css" rel="stylesheet" type="text/css" />
    <link
      href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
      rel="stylesheet"
    />
  </head>
  <body
    class="bg-secondary text-content flex flex-col justify-between min-h-screen"
  >
    <%- include("components/layout/header") %>
    <div class="container mx-auto p-4">
      <h1 class="text-center text-4xl">Create a new Team</h1>
      <h2 id="maxBudget" class="hidden">Maximum value: <%= maxCoinBudget %></h2>
      <div id="coinsUsed">Coins used: 0</div>

      <form action="/team/create" method="POST">
        <div class="mb-4">
          <label for="teamName" class="block text-sm mb-2">Team name</label>
          <input
            type="text"
            name="teamName"
            id="teamName"
            class="border-b-primary border-b-2 w-full py-2 px-3 leading-tight max-w-sm text-content outline-none bg-secondary"
            required
          />
        </div>

        <div class="max-h-96 overflow-scroll my-8 rounded-md">
          <% for(let i = 0; i < pilots.length; i++){ %>
          <input
            type="checkbox"
            name="pilots"
            id="checkbox_<%= pilots[i].id %>"
            value="<%= pilots[i].id %>"
            class="hidden"
            data-val="<%= pilots[i].value%>"
          />
          <div
            id="<%= pilots[i].id %>"
            class="relative bg-secondary-focus shadow-sm p-4 text-lg font-bold border-2 border-secondary-focus"
          >
            <div>
              <%= pilots[i].name %> <%= pilots[i].surname %>
              <p class="text-sm font-medium">Team</p>
              <p class="text-sm font-semibold text-primary">
                <%= pilots[i].value %> coins
              </p>
            </div>
            <div class="absolute top-2 right-4 cursor-pointer">
              <i
                class="bx bxs-plus-square pilot-purchase text-2xl text-primary hover:text-primary-focus"
                id="purchase-<%= pilots[i].id %>"
              ></i>
            </div>
            <p class="text-sm text-right font-normal h-4 text-primary" id="error-<%=pilots[i].id %>"></p>
          </div>
          <% } %>
        </div>
        <input
          type="submit"
          value="Create"
          class="bg-primary hover:cursor-pointer hover:bg-opacity-80 font-bold py-2 px-4 rounded"
        />
      </form>
    </div>

    <%- include("components/layout/footer") %>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        document.addEventListener("click", (e) => {
          if (!e.target.classList.contains("pilot-purchase")) {
            return;
          }

          let pilotId = e.target.id;
          pilotId = pilotId.split("-")[1];

          const pilotCheckbox = document.getElementById("checkbox_" + pilotId);
          const pilotVal=pilotCheckbox.dataset.val;
          resetError(pilotId);
          if(!isPurchaseable(pilotVal) && !pilotCheckbox.checked){
            console.log("non si puo");
            setError(pilotId);    //commentare per testing controlli validitÃ  in backend
            return;
          }


          pilotCheckbox.checked = !pilotCheckbox.checked;
          event.target.classList.toggle("bxs-plus-square");
          event.target.classList.toggle("bxs-minus-square");
          printCoinsUsed();
        });

        const pilotsSelect = document.querySelectorAll('[id^="checkbox_"]');
        const coinCounter = document.getElementById("coinCounter");
        const coinsUsed = document.getElementById("coinsUsed");
        

        let totalCost=0;
        const coinsMaxBudget = document
          .getElementById("maxBudget")
          .innerHTML.match(/\d+/)[0];
        console.log("coinsMaxBudget", coinsMaxBudget);

        function calculateSelected() {
          const selectedOptions = Array.from(pilotsSelect).filter(
            (option) => option.checked
          );

          selectedOptions.map((option) => option.dataset.val);
          totalCost = 0;
          selectedOptions.forEach((option) => {
            totalCost += parseInt(option.dataset.val);
          });
          return totalCost;
        }

        
        function printCoinsUsed() {
          const used = calculateSelected();
          coinsUsed.innerHTML = `Coins used: ${used}`;
        }

        const form = document.querySelector("form");
        form.addEventListener("submit", checkBudget);  //commentare per testing backend

        function checkBudget(event) {
          let coinsUsed = calculateSelected();
          console.log("maxBudget", coinsMaxBudget);
          if (coinsUsed > coinsMaxBudget) {
            // segnalare errore in qualche modo
            alert("You have exceeded the maximum budget");
            event = event.preventDefault();
          } else {
            alert("Team created successfully");
          }
        }

        function isPurchaseable(price){
          const temp=parseInt(totalCost)+parseInt(price);
          if(temp<=coinsMaxBudget){
            return true;
          }
          return false;
        }


        function setError(pilotId){
          const errorNode= document.getElementById("error-"+pilotId);
          console.log("errorNode", errorNode);
          errorNode.innerHTML="You have exceeded the maximum budget ("+coinsMaxBudget+")";
          let timeout= setTimeout(function(){resetError(pilotId);}, 3000);
          
        }
        function resetError(pilotId){
          console.log("reset", pilotId);
          const errorN= document.getElementById("error-"+pilotId);
          console.log("reset", errorN);
          errorN.innerHTML="";
        }

      });
    </script>
  </body>
</html>
